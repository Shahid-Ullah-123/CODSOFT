#include <iostream>
#include<string>
using namespace std;

const int MAX_TASKS = 100; 

struct Task {
    string description;
    bool completed;
};

// Function prototypes
void addTask(Task tasks[], int& taskCount, const string& description);
void viewTasks(const Task tasks[], int taskCount);
void markAsCompleted(Task tasks[], int taskCount, int index);
void removeTask(Task tasks[], int& taskCount, int index);

int main() {
    Task tasks[MAX_TASKS];
    int taskCount = 0;
    int choice;

    do {
        cout << "To-Do List Manager" << endl;
        cout << "1. Add Task" << endl;
        cout << "2. View Tasks" << endl;
        cout << "3. Mark Task as Completed" << endl;
        cout << "4. Remove Task" << endl;
        cout << "5. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                string description;
                cout << "Enter task description: ";
                cin.ignore();
                getline(cin, description);
                addTask(tasks, taskCount, description);
                break;
            }
            case 2:
                viewTasks(tasks, taskCount);
                break;
            case 3: {
                int index;
                cout << "Enter the index of the task to mark as completed: ";
                cin >> index;
                markAsCompleted(tasks, taskCount, index);
                break;
            }
            case 4: {
                int index;
                cout << "Enter the index of the task to remove: ";
                cin >> index;
                removeTask(tasks, taskCount, index);
                break;
            }
            case 5:
                cout << "Exiting program. Goodbye!" << endl;
                break;
            default:
                cout << "Invalid choice. Please try again." << endl;
        }

    } while (choice != 5);

    return 0;
}

// Function to add a task to the list
void addTask(Task tasks[], int& taskCount, const string& description) {
    if (taskCount < MAX_TASKS) {
        tasks[taskCount].description = description;
        tasks[taskCount].completed = false;
        ++taskCount;
        cout << "Task added successfully!" << endl;
    } else {
        cout << "Maximum number of tasks reached. Cannot add more tasks." << endl;
    }
}

// Function to view the list of tasks
void viewTasks(const Task tasks[], int taskCount) {
    cout << "To-Do List:" << endl;
    for (int i = 0; i < taskCount; ++i) {
        cout << i + 1 << ". " << tasks[i].description;
        if (tasks[i].completed) {
            cout << " - Completed";
        }
        cout << endl;
    }
}

// Function to mark a task as completed
void markAsCompleted(Task tasks[], int taskCount, int index) {
    if (index >= 1 && index <= taskCount) {
        tasks[index - 1].completed = true;
        cout << "Task marked as completed!" << endl;
    } else {
        cout << "Invalid index. Please enter a valid index." << endl;
    }
}

// Function to remove a task from the list
void removeTask(Task tasks[], int& taskCount, int index) {
    if (index >= 1 && index <= taskCount) {
        for (int i = index - 1; i < taskCount - 1; ++i) {
            tasks[i] = tasks[i + 1];
        }
        --taskCount;
        cout << "Task removed successfully!" << endl;
    } else {
        cout << "Invalid index. Please enter a valid index." << endl;
    }
}
