#include <iostream>

using namespace std;

// Function prototypes
void displayBoard(char board[3][3]);
bool makeMove(char board[3][3], char player, int row, int col);
bool checkWin(char board[3][3], char player);
bool checkDraw(char board[3][3]);
bool playAgain();

int main() {
    bool gameRunning = true;

    do {
        // Initialize the board
        char board[3][3] = { { ' ', ' ', ' ' },
                             { ' ', ' ', ' ' },
                             { ' ', ' ', ' ' } };

        char currentPlayer = 'X';
        int row, col;

        do {
            // Display the current state of the board
            displayBoard(board);

            // Prompt the current player to enter their move
            cout << "Player " << currentPlayer << ", enter your move (row and column): ";
            cin >> row >> col;

            // Check if the move is valid and update the board
            if (makeMove(board, currentPlayer, row - 1, col - 1)) {
                // Check for a win
                if (checkWin(board, currentPlayer)) {
                    displayBoard(board);
                    cout << "Player " << currentPlayer << " wins!" << endl;
                    break;
                }

                // Check for a draw
                if (checkDraw(board)) {
                    displayBoard(board);
                    cout << "It's a draw!" << endl;
                    break;
                }

                // Switch players
                currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
            } else {
                cout << "Invalid move. Try again." << endl;
            }
        } while (gameRunning);

        // Ask if players want to play again
        gameRunning = playAgain();

    } while (gameRunning);

    cout << "Thanks for playing! Goodbye." << endl;

    return 0;
}

// Function to display the current state of the board
void displayBoard(char board[3][3]) {
    cout << "Game Board:" << endl;
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to make a move on the board
bool makeMove(char board[3][3], char player, int row, int col) {
    // Check if the cell is empty
    if (board[row][col] == ' ') {
        board[row][col] = player;
        return true;
    } else {
        return false; // Invalid move
    }
}

// Function to check if the current player has won
bool checkWin(char board[3][3], char player) {
    // Check rows, columns, and diagonals for a win
    for (int i = 0; i < 3; ++i) {
        if (board[i][0] == player && board[i][1] == player && board[i][2] == player) {
            return true; // Row win
        }
        if (board[0][i] == player && board[1][i] == player && board[2][i] == player) {
            return true; // Column win
        }
    }
    if (board[0][0] == player && board[1][1] == player && board[2][2] == player) {
        return true; // Diagonal win (top-left to bottom-right)
    }
    if (board[0][2] == player && board[1][1] == player && board[2][0] == player) {
        return true; // Diagonal win (top-right to bottom-left)
    }
    return false; // No win
}

// Function to check if the game is a draw
bool checkDraw(char board[3][3]) {
    // Check if there are no empty cells left
    for (int i = 0; i < 3; ++i) {
        for (int j = 0; j < 3; ++j) {
            if (board[i][j] == ' ') {
                return false; // Game not a draw
            }
        }
    }
    return true; // Game is a draw
}

// Function to ask if players want to play again
bool playAgain() {
    char response;
    cout << "Do you want to play again? (y/n): ";
    cin >> response;
    return (response == 'y' || response == 'Y');
}
